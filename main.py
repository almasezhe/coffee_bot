import os
import uuid
import logging
import asyncio
from datetime import datetime, timedelta, timezone
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup,KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
import psycopg2
from psycopg2.extras import RealDictCursor
import aiogram

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# API Key and Database URL
API_KEY = "8103008160:AAFlMNkjk84genN5awpUcUDIayEc3DJyHO0"
DB_URL="postgresql://postgres.jmujxtsvrbhlvthkkbiq:dbanMcmX9oxJyQlE@aws-0-eu-central-1.pooler.supabase.com:6543/postgres"

bot = Bot(token=API_KEY)
dp = Dispatcher()
astana_tz = timezone(timedelta(hours=5))
db_connection = None
users_row = None
cafe_options = None
coffee_options = None
is_cafe_chosen = False
is_coffee_chosen = False
user_data = {}
### Database Helpers ###

async def db_execute(query, params=None, fetch=False):
    try:
        with db_connection.cursor(cursor_factory=RealDictCursor) as cursor:
            cursor.execute(query, params)
            db_connection.commit()
            if fetch:   
                return cursor.fetchall()
    except Exception as e:
        logger.error(f"Database error: {e}")
        return None


async def retrieve_cafe_schedule(cafe_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–∞—Ñ–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–Ω—è (–±—É–¥–Ω–∏–π, —Å—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    weekday = datetime.now(astana_tz).weekday()  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = 6
    if weekday < 5:
        day_type = "–±—É–¥–Ω–∏–π"
    elif weekday == 5:
        day_type = "—Å—É–±–±–æ—Ç–∞"
    else:
        day_type = "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    
    # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    query = """
        SELECT open_time, close_time 
        FROM working_hours 
        WHERE cafe_id = %s AND day_type = %s;
    """
    schedule = await db_execute(query, params=(cafe_id, day_type), fetch=True)
    return schedule[0] if schedule else None


async def retrieve_cafe_options():
    query = "SELECT * FROM cafes WHERE is_active = TRUE;"
    return await db_execute(query, fetch=True)


async def retrieve_menu(cafe_id):
    query = "SELECT * FROM menu WHERE cafe_id = %s;"
    return await db_execute(query, params=(cafe_id,), fetch=True)


async def create_order(telegram_id, cafe_id, menu_id):
    # Fetch the user_id using telegram_id
    query_get_user_id = "SELECT user_id FROM users WHERE telegram_id = %s;"
    user = await db_execute(query_get_user_id, params=(str(telegram_id),), fetch=True)  # Cast telegram_id to string

    if not user:
        logger.error(f"User with telegram_id={telegram_id} not found in the database.")
        return None

    user_id = user[0]["user_id"]

    # Insert the order
    query_create_order = """
        INSERT INTO orders (user_id, cafe_id, menu_id, order_date, status)
        VALUES (%s, %s, %s, %s, %s)
        RETURNING order_id;
    """
    print(datetime.now(astana_tz))
    return await db_execute(query_create_order, params=(user_id, cafe_id, menu_id, datetime.now(astana_tz), "pending"), fetch=True)


async def check_user_subscription(telegram_id):
    """Check if a user has an active subscription."""
    query = "SELECT * FROM users WHERE telegram_id = %s;"
    try:
        # Cast telegram_id to a string to match the database column type
        result = await db_execute(query, params=(str(telegram_id),), fetch=True)
        return result[0] if result else None
    except Exception as e:
        logger.error(f"Database error: {e}")
        return None
async def get_user_by_id(user_id):
    """Retrieve user information by user_id."""
    query = "SELECT * FROM users WHERE user_id = %s;"
    result = await db_execute(query, params=(user_id,), fetch=True)
    return result[0] if result else None
async def get_user_latest_order(user_id):
    query = """
        SELECT o.order_id, o.status, o.otp_code, m.coffee_name
        FROM orders o
        JOIN menu m ON o.menu_id = m.menu_id
        WHERE o.user_id = %s
        ORDER BY o.order_date DESC
        LIMIT 1;
    """
    result = await db_execute(query, params=(user_id,), fetch=True)
    return result[0] if result else None



async def display_subscription_status(message: types.Message):
    if not users_row["subscription_status"]:
        reply_message = (
            "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ü•∫\n\n"
            "–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @tratatapara ‚úçÔ∏è\n\n"
            "–ü–æ –ø–æ–¥–ø–∏—Å–∫–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 30 –∫–æ—Ñ–µ –≤ –º–µ—Å—è—Ü –≤–æ –≤—Å–µ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –∫–æ—Ñ–µ–π–Ω—è—Ö ‚òïÔ∏è\n\n"
            "–ì–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É? ‚úÖ:\n\n"
            "- Coffee Moose (2GIS)\n"
            "- Korizza (2GIS)\n"
            "- OneShot Coffee (2GIS)\n"
            "- ZhanPresso (2GIS)\n"
            "- Coffee Moose (2GIS)\n"
            "- Korizza (2GIS)\n"
            "- OneShot Coffee (2GIS)\n"
            "- ZhanPresso (2GIS)\n"
            "- Coffee Moose (2GIS)\n"
            "- Korizza (2GIS)\n"
            "- OneShot Coffee (2GIS)\n"
            "- ZhanPresso (2GIS)\n\n"
            "–ü–∏—à–∏—Ç–µ —Å–∫–æ—Ä–µ–µ –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @tratatapara, –∏ –º—ã –ø–æ–∑–∞–±–æ—Ç–∏–º—Å—è –æ –≤–∞—à–µ–º –∫–æ–º—Ñ–æ—Ä—Ç–µ –≤ –∫–∞–∂–¥–æ–π –≤—ã–ø–∏—Ç–æ–π —á–∞—à–∫–µ –∫–æ—Ñ–µ!"
        )
    else:
        reply_message = (
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å 30 –∫–æ—Ñ–µ –≤ –º–µ—Å—è—Ü, 1 –∫–æ—Ñ–µ –≤ –¥–µ–Ω—å."
        )

    await send_message_and_menu_buttons(message, reply_message, ["–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"])


async def send_message_and_menu_buttons(message, reply_message, buttons_names):
    keyboard = [[KeyboardButton(text=name)] for name in buttons_names]
    menu = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=False)
    await message.answer(reply_message, reply_markup=menu)


### User Interaction ###


@dp.message(Command("start"))
async def start(message: types.Message):
    global users_row, is_cafe_chosen, is_coffee_chosen
    is_cafe_chosen = False
    is_coffee_chosen = False

    telegram_id = message.from_user.id
    username = message.from_user.username  # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    first_name = message.from_user.first_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if username:  # –ï—Å–ª–∏ username —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await register_user(telegram_id, username)
        if first_name:  # –ï—Å–ª–∏ –∏–º—è —É–∫–∞–∑–∞–Ω–æ
            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {first_name} ü•≥\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Refill - —Å–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ—Ñ–µ ü§ó"
            )
        else:  # –ï—Å–ª–∏ –∏–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ username
            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {username} ü•≥\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Refill - —Å–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ—Ñ–µ ü§ó"
            )
    else:  # –ï—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ username –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram."
        )
    users_row = await check_user_subscription(telegram_id)
    if users_row:
        await display_subscription_status(message)

async def register_user(telegram_id: int, username: str):
    query = """
        INSERT INTO users (telegram_id, username, subscription_status)
        VALUES (%s, %s, FALSE)
        ON CONFLICT (telegram_id) DO NOTHING;
    """
    await db_execute(query, params=(telegram_id, username))


@dp.message(F.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def handle_order_request(message: types.Message):
    global cafe_options

    telegram_id = message.from_user.id
    user = await check_user_subscription(telegram_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not user or not user["subscription_status"]:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ ü•∫\n"
"–î–ª—è –µ—ë –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É \n@tratatapara ‚úÖ")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤
    query = """
        SELECT COUNT(*) AS daily_orders
        FROM orders
        JOIN users ON orders.user_id = users.user_id
        WHERE users.telegram_id = %s
          AND DATE(orders.order_date) = CURRENT_DATE
          AND orders.status NOT IN ('canceled');  -- –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    """
    result = await db_execute(query, params=(str(telegram_id),), fetch=True)
    daily_orders = result[0]["daily_orders"] if result else 0

    if daily_orders >= 1:
        await message.answer("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å 1 –∫–æ—Ñ–µ –≤ –¥–µ–Ω—å.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user["phone_number"]:  # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ—Ç
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
                [KeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è\n\n"
"–û–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ ü§ó\n\n"
"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–º–µ—Ä—É ‚úÖ.",
            reply_markup=keyboard,
        )
        return


    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ñ–µ
    cafe_options = await retrieve_cafe_options()
    if not cafe_options:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ñ–µ.")
        return

    await show_cafe_selection(message)


@dp.message(F.contact)
async def handle_phone_number(message: types.Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏–ª."""
    telegram_id = message.from_user.id
    phone_number = message.contact.phone_number

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    query = "UPDATE users SET phone_number = %s WHERE telegram_id = %s;"
    await db_execute(query, params=(phone_number, str(telegram_id)))
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
            ]
        ],
        resize_keyboard=True,  # –£–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
        one_time_keyboard=False  # –°–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    )
    await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ\n\n"
    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ü•≥", reply_markup=keyboard)
    await handle_order_request(message)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞


@dp.message(F.text == "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è")
async def handle_decline_phone_request(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
            ]
        ],
        resize_keyboard=True,  # –£–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
        one_time_keyboard=False  # –°–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    )
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–∞–∑ –æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    await message.answer("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üòî\n\n"
    "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –±–µ–∑ –Ω–µ–≥–æ ‚úÖ",reply_markup=keyboard)
    cafe_options = await retrieve_cafe_options()
    if not cafe_options:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ñ–µ.")
        return

    await show_cafe_selection(message)





async def show_cafe_selection(message, page=0):
    global cafe_options
    if not cafe_options:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π.")
        return

    items_per_page = 4
    total_pages = (len(cafe_options) + items_per_page - 1) // items_per_page
    start_idx = page * items_per_page
    end_idx = start_idx + items_per_page
    cafes_page = cafe_options[start_idx:end_idx]

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ñ–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞–±–æ—Ç—ã –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ 2–ì–ò–°
    buttons = []
    for cafe in cafes_page:
        schedule = await retrieve_cafe_schedule(cafe["cafe_id"])
        if schedule:
            close_time = schedule["close_time"].strftime("%H:%M")
            open_time = schedule["open_time"].strftime("%H:%M")
            text = f"{cafe['name']}"
        else:
            text = f"{cafe['name']}"

        # –ö–Ω–æ–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ñ–µ –∏ –∫–Ω–æ–ø–∫–∞ "2–ì–ò–°" –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
        row = [
            InlineKeyboardButton(text=text, callback_data=f"cafe_{cafe['cafe_id']}"),   
            InlineKeyboardButton(text=f"üìç {cafe['location']}", url=cafe["location_url"]) if cafe.get("location_url") else None
        ]
        # –§–∏–ª—å—Ç—Ä—É–µ–º None –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
        buttons.append([btn for btn in row if btn])

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(InlineKeyboardButton(text="<--", callback_data=f"cafes_page_{page - 1}"))
    if page < total_pages - 1:
        navigation_buttons.append(InlineKeyboardButton(text="-->", callback_data=f"cafes_page_{page + 1}"))

    if navigation_buttons:
        buttons.append(navigation_buttons)

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    try:
        await message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ñ–µ–π–Ω—é üëá:", reply_markup=keyboard)
    except aiogram.exceptions.TelegramBadRequest:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ñ–µ–π–Ω—é üëá:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("cafes_page_"))
async def navigate_cafe_pages(callback_query: types.CallbackQuery):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∫–∞—Ñ–µ."""
    page = int(callback_query.data.split("_")[2])
    await show_cafe_selection(callback_query.message, page=page)
    await callback_query.answer()


@dp.callback_query(F.data.startswith("cafe_"))
async def handle_cafe_selection(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ñ–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ñ–µ."""
    cafe_id = int(callback_query.data.split("_")[1])

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–∞—Ñ–µ
    schedule = await retrieve_cafe_schedule(cafe_id)
    if not schedule:
        await callback_query.answer("–£ —ç—Ç–æ–≥–æ –∫–∞—Ñ–µ –Ω–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", show_alert=True)
        return

    now = datetime.now(astana_tz).time()
    if not (schedule["open_time"] <= now <= schedule["close_time"]):
        await callback_query.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∫–æ—Ñ–µ–π–Ω—è —Å–µ–π—á–∞—Å –∑–∞–∫—Ä—ã—Ç–∞, –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∫–æ—Ñ–µ–π–Ω–∏: {schedule["open_time"]} - {schedule["close_time"]} \n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –≤ –¥—Ä—É–≥–æ–π –∫–æ—Ñ–µ–π–Ω–µ", show_alert=True)
        return

    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é
    try:
        await show_coffee_selection(callback_query.message, cafe_id)
    except Exception as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
    await callback_query.answer()


async def show_coffee_selection(message, cafe_id, page=0):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ñ–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∞—Ñ–µ."""
    global coffee_options

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞—Ñ–µ
    coffee_options = await retrieve_menu(cafe_id)
    if not coffee_options:
        await message.answer("–í —ç—Ç–æ–º –∫–∞—Ñ–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ—Ñ–µ.")
        return

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –º–µ–Ω—é
    items_per_page = 4
    total_pages = (len(coffee_options) + items_per_page - 1) // items_per_page
    start_idx = page * items_per_page
    end_idx = start_idx + items_per_page
    coffee_page = coffee_options[start_idx:end_idx]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ—Ñ–µ
    buttons = [
        [
            InlineKeyboardButton(
                text=f"üö´{coffee['coffee_name']} - –ù–ï–î–û–°–¢–£–ü–ù–û" if not coffee["is_available"] else coffee["coffee_name"],
                callback_data=f"coffee_{coffee['menu_id']}_{cafe_id}"
            )
        ]
        for coffee in coffee_page
    ]

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(InlineKeyboardButton(text="<--", callback_data=f"coffee_page_{cafe_id}_{page - 1}"))
    if page < total_pages - 1:
        navigation_buttons.append(InlineKeyboardButton(text="-->", callback_data=f"coffee_page_{cafe_id}_{page + 1}"))

    if navigation_buttons:
        buttons.append(navigation_buttons)

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
    try:
        await message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ñ–µ üëá:", reply_markup=keyboard)
    except aiogram.exceptions.TelegramBadRequest:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ñ–µ üëá:", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("coffee_page_"))
async def navigate_coffee_pages(callback_query: types.CallbackQuery):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∫–æ—Ñ–µ."""
    try:
        data = callback_query.data.split("_")
        cafe_id = int(data[2])
        page = int(data[3])

        await show_coffee_selection(callback_query.message, cafe_id, page=page)
        await callback_query.answer()
    except (IndexError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–æ—Ñ–µ: {e}")
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

@dp.callback_query(F.data.startswith("coffee_"))
async def handle_coffee_selection(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ—Ñ–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
    try:
        data = callback_query.data.split("_")
        menu_id = int(data[1])  # ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ—Ñ–µ
        cafe_id = int(data[2])  # ID –∫–∞—Ñ–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ—Ñ–µ

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ—Ñ–µ
        selected_coffee = next((coffee for coffee in coffee_options if coffee["menu_id"] == menu_id), None)
        if not selected_coffee:
            await callback_query.answer("–≠—Ç–æ—Ç –∫–æ—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
            return

        if not selected_coffee["is_available"]:
            await callback_query.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –∫–æ—Ñ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä –∫–æ—Ñ–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_id = callback_query.from_user.id
        user_data[telegram_id] = {"cafe_id": cafe_id, "menu_id": menu_id}

        # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞", callback_data="add_comment_yes")],
                [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="add_comment_no")]
            ]
        )
        await callback_query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_coffee['coffee_name']}‚úÖ\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–∫–∞–∑—É?\n(–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∏—Ä–æ–ø, —Å–∞—Ö–∞—Ä –∏ —Ç.–¥.)",
            reply_markup=keyboard
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ—Ñ–µ: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)


@dp.callback_query(F.data == "add_comment_yes")
async def handle_add_comment_yes(callback_query: types.CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    telegram_id = callback_query.from_user.id
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∫ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–∏—Ç—å —Å–∏—Ä–æ–ø, —Å–∞—Ö–∞—Ä –∏ —Ç.–¥.).",reply_markup=None)
    user_data[telegram_id]["awaiting_comment"] = True  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await callback_query.answer()


@dp.callback_query(F.data == "add_comment_no")
async def handle_add_comment_no(callback_query: types.CallbackQuery):
    """–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""
    telegram_id = callback_query.from_user.id
    order_data = user_data.get(telegram_id, {})
    
    if not order_data:
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    # –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π
    order = await create_order(telegram_id, order_data["cafe_id"], order_data["menu_id"])
    if order:
        order_id = order[0]["order_id"]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∏—Ç—å"
        cancel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_order_{order_id}")]
            ]
        )
        asyncio.create_task(monitor_order_status(telegram_id))

        await callback_query.message.edit_text(
            f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω ü•≥\n–ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–æ—Ñ–µ–π–Ω–∏ ‚è∞\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üö´\n",
            reply_markup=cancel_keyboard
        )

    else:
        await callback_query.edit("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.", show_alert=True)


@dp.message(lambda message: user_data.get(message.from_user.id, {}).get("awaiting_comment"))
async def handle_order_comment(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑."""
    telegram_id = message.from_user.id
    order_data = user_data.get(telegram_id, {})

    if not order_data:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å
    query_daily_orders = """
        SELECT COUNT(*) AS daily_orders
        FROM orders
        JOIN users ON orders.user_id = users.user_id
        WHERE users.telegram_id = %s
          AND DATE(orders.order_date) = CURRENT_DATE
          AND orders.status NOT IN ('canceled');  -- –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    """
    result = await db_execute(query_daily_orders, params=(str(telegram_id),), fetch=True)
    daily_orders = result[0]["daily_orders"] if result else 0

    if daily_orders >= 1:
        await message.answer("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å 1 –∫–æ—Ñ–µ –≤ –¥–µ–Ω—å.")
        # –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data.pop(telegram_id, None)
        return

    # –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å –¥–µ—Ç–∞–ª—è–º–∏
    comment = message.text
    order = await create_order_with_details(telegram_id, order_data["cafe_id"], order_data["menu_id"], comment)
    if order:
        order_id = order[0]["order_id"]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∏—Ç—å"
        cancel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_order_{order_id}")]
            ]
        )
        asyncio.create_task(monitor_order_status(telegram_id))

        await message.answer(
            f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω ü•≥\n–ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–æ—Ñ–µ–π–Ω–∏ ‚è∞\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üö´\n",
            reply_markup=cancel_keyboard
        )
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")

    
    # –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data.pop(telegram_id, None)


async def create_order_with_details(telegram_id, cafe_id, menu_id, details):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏."""
    query_get_user_id = "SELECT user_id FROM users WHERE telegram_id = %s;"
    user = await db_execute(query_get_user_id, params=(str(telegram_id),), fetch=True)

    if not user:
        logger.error(f"User with telegram_id={telegram_id} not found in the database.")
        return None

    user_id = user[0]["user_id"]

    query_create_order = """
        INSERT INTO orders (user_id, cafe_id, menu_id, order_date, status, details)
        VALUES (%s, %s, %s, %s, %s, %s)
        RETURNING order_id;
    """
    
    return await db_execute(query_create_order, params=(user_id, cafe_id, menu_id, datetime.now(astana_tz), "pending", details), fetch=True)


@dp.callback_query(F.data.startswith("cancel_order_"))
async def cancel_order(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç."""
    try:
        order_id = int(callback_query.data.split("_")[2])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        query = "SELECT status FROM orders WHERE order_id = %s;"
        result = await db_execute(query, params=(order_id,), fetch=True)

        if not result:
            await callback_query.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        current_status = result[0]["status"]

        if current_status == "–≥–æ—Ç–æ–≤–∏—Ç—Å—è":
            await callback_query.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω.", show_alert=True)
            return
        elif current_status == "–≥–æ—Ç–æ–≤–æ":
            await callback_query.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≥–æ—Ç–æ–≤ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω.", show_alert=True)
            return
        elif current_status == "–≤—ã–¥–∞–Ω":
            await callback_query.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –≤—ã–¥–∞–Ω –≤–∞–º –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω.", show_alert=True)
            return

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç, –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
        update_query = "UPDATE orders SET status = 'canceled' WHERE order_id = %s;"
        await db_execute(update_query, params=(order_id,))

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω–µ
        await callback_query.message.edit_text(
            f"üõë–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ωüõë\n"
"–ú—ã –Ω–∞–¥–µ–µ–º—Å—è, –≤—ã —Å–¥–µ–ª–∞–µ—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ–∑–∂–µ ü•∫"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
        await callback_query.message.delete()
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text= f"üõë–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ωüõë\n""–ú—ã –Ω–∞–¥–µ–µ–º—Å—è, –≤—ã —Å–¥–µ–ª–∞–µ—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ–∑–∂–µ ü•∫"
        )
        await callback_query.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
    except (IndexError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)




async def monitor_order_status(telegram_id):
    """Monitor the status of an order and notify the user."""
    try:
        query = """
            SELECT o.order_id, o.status, o.otp_code, m.coffee_name
            FROM orders o
            JOIN menu m ON o.menu_id = m.menu_id
            JOIN users u ON o.user_id = u.user_id
            WHERE u.telegram_id = %s
            ORDER BY o.order_date DESC
            LIMIT 1;
        """
        order = await db_execute(query, params=(str(telegram_id),), fetch=True)  # Cast telegram_id to string

        if not order:
            logger.error(f"No recent orders found for telegram_id={telegram_id}")
            return

        order_id, last_status = order[0]["order_id"], order[0]["status"]

        while last_status not in ["–≥–æ—Ç–æ–≤–æ", "–≤—ã–¥–∞–Ω"]:
            await asyncio.sleep(5)
            updated_order = await db_execute(query, params=(str(telegram_id),), fetch=True)

            if not updated_order or updated_order[0]["status"] == last_status:
                continue

            last_status = updated_order[0]["status"]
            if last_status == "–≥–æ—Ç–æ–≤–∏—Ç—Å—è":
                await bot.send_message(
                    chat_id=telegram_id,
                    text=f"üü°–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ–±–Ω–æ–≤–ª–µ–Ωüü°\n–°—Ç–∞—Ç—É—Å: –≥–æ—Ç–æ–≤–∏—Ç—Å—è‚è≥"
                )
            elif last_status == "–≥–æ—Ç–æ–≤–æ":
                otp_code = updated_order[0]["otp_code"]
                await bot.send_message(
                    chat_id=telegram_id,
                    text=f"‚úÖ–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –≥–æ—Ç–æ–≤‚úÖ\n–ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ –∫–∞—Å—Å–∏—Ä—É —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚òïÔ∏è"
                )
            elif last_status == "–≤—ã–¥–∞–Ω":
                await bot.send_message(
                    chat_id=telegram_id,
                    text=f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –≤—ã–¥–∞–Ω \n‚úÖ–°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º ü´∂\n–ñ–¥–µ–º –≤–∞—Å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤–æ–π —á–∞—à–µ—á–∫–æ–π –∫–æ—Ñ–µ ü§ó"
                )
                break
            elif last_status == "canceled":
                await bot.send_message(
                    chat_id=telegram_id,
                    text=f"üõë –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω. –ú—ã –Ω–∞–¥–µ–µ–º—Å—è, –≤—ã —Å–¥–µ–ª–∞–µ—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ–∑–∂–µ ü•∫"
                )
                break
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ monitor_order_status: {e}")





async def monitor_otp_updates():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è OTP-–∫–æ–¥–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    while True:
        query = """
            SELECT o.order_id, o.otp_code, u.telegram_id
            FROM orders o
            JOIN users u ON o.user_id = u.user_id
            WHERE o.otp_code IS NOT NULL AND o.otp_notified = FALSE;
        """
        otp_orders = await db_execute(query, fetch=True)

        for order in otp_orders:
            order_id = order["order_id"]
            otp_code = order["otp_code"]
            telegram_id = order["telegram_id"]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await bot.send_message(
                    chat_id=telegram_id,
                    text=f"‚úÖ–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –≥–æ—Ç–æ–≤‚úÖ\n‚≠ïÔ∏è –í–∞—à OTP-–∫–æ–¥: {otp_code} ‚≠ïÔ∏è"
                )
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                update_query = "UPDATE orders SET otp_notified = TRUE WHERE order_id = %s;"
                await db_execute(update_query, params=(order_id,))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ OTP-–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

        # –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(1)

async def monitor_otp_updates():
    while True:
        query = """
            SELECT o.order_id, o.otp_code, u.telegram_id
            FROM orders o
            JOIN users u ON o.user_id = u.user_id
            WHERE o.otp_code IS NOT NULL AND o.otp_notified = FALSE;
        """
        otp_orders = await db_execute(query, fetch=True)

        for order in otp_orders:
            order_id = order["order_id"]
            otp_code = order["otp_code"]
            telegram_id = order["telegram_id"]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await bot.send_message(
                    chat_id=telegram_id,
                    text=f"‚úÖ–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –≥–æ—Ç–æ–≤‚úÖ\n‚≠ïÔ∏è –í–∞—à OTP-–∫–æ–¥: {otp_code} ‚≠ïÔ∏è"
                )
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                update_query = "UPDATE orders SET otp_notified = TRUE WHERE order_id = %s;"
                await db_execute(update_query, params=(order_id,))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ OTP-–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

        # –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(1)

async def monitor_otp_updates():
    while True:
        query = """
            SELECT o.order_id, o.otp_code, u.telegram_id
            FROM orders o
            JOIN users u ON o.user_id = u.user_id
            WHERE o.otp_code IS NOT NULL AND o.otp_notified = FALSE;
        """
        otp_orders = await db_execute(query, fetch=True)

        for order in otp_orders:
            order_id = order["order_id"]
            otp_code = order["otp_code"]
            telegram_id = order["telegram_id"]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await bot.send_message(
                    chat_id=telegram_id,
                    text=f"‚úÖ–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –≥–æ—Ç–æ–≤‚úÖ\n‚≠ïÔ∏è –í–∞—à OTP-–∫–æ–¥: {otp_code} ‚≠ïÔ∏è"
                )
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                update_query = "UPDATE orders SET otp_notified = TRUE WHERE order_id = %s;"
                await db_execute(update_query, params=(order_id,))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ OTP-–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

        # –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(1)

async def monitor_subscription_updates():
    while True:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        query = """
            SELECT user_id, telegram_id, subscription_end_date, subscription_notified
            FROM users
            WHERE subscription_status = TRUE;
        """
        active_subscriptions = await db_execute(query, fetch=True)

        for user in active_subscriptions:
            user_id = user["user_id"]
            telegram_id = user["telegram_id"]
            subscription_end_date = user["subscription_end_date"]
            subscription_notified = user["subscription_notified"]

            # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            if not subscription_notified:
                try:
                    await bot.send_message(
                        chat_id=telegram_id,
                        text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏! üéâ\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ü§ó"
                    )
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    update_query = "UPDATE users SET subscription_notified = TRUE WHERE user_id = %s;"
                    await db_execute(update_query, params=(user_id,))
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            if subscription_end_date and datetime.now().date() >= subscription_end_date:
                try:
                    # –°—Ç–∞–≤–∏–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ FALSE –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    update_query = """
                        UPDATE users
                        SET subscription_status = FALSE, subscription_notified = FALSE
                        WHERE user_id = %s;
                    """
                    await db_execute(update_query, params=(user_id,))

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                    await bot.send_message(
                        chat_id=telegram_id,
                        text="–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏. üòä"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")

        # –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(1)
async def main():
    global db_connection
    db_connection = psycopg2.connect(DB_URL)

    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ OTP-–∫–æ–¥–æ–≤
    asyncio.create_task(monitor_otp_updates())
    asyncio.create_task(monitor_subscription_updates())
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    await dp.start_polling(bot)

    db_connection.close()



if __name__ == "__main__":
    asyncio.run(main())